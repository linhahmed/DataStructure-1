package eg.edu.alexu.csd.datastructure.linkedList;

public class Double implements ILinkedList 
{
	private static Node head; 
	private static Node tail; 
	private static int size = 0; 
	
	
	private static class Node 
	{
		private Object data;
		private Node prev; 
		private Node next; 
		public Node(Object d)
		{
			data = d;
		}   
	}
	
	
	@Override
	public void add(int index, Object element) 
	{
		Node current=head;
		Node store;
		Node addelement =new Node(element);
		if(head==null)
		{
			addelement.prev=null;
			head=addelement;
			tail=addelement;
		}
		else if(index==0)
		{
			store=head;
			head=addelement;
			addelement.prev=null;
			addelement.next=store;
			if(tail==null)
			{
				tail=addelement;
			}	
		}
		else if(index==size)
		{
			tail.next=addelement;
			addelement.prev=tail;
			tail=addelement;
		}
		else if(index>size || index<0)
		{
			throw new IndexOutOfBoundsException();
		}	
		else
		{
			for(int i=0;i<index-1;i++)
			{	
				current=current.next;
			}
		    store=current.next;
			current.next=addelement;
			addelement.prev=current;
			addelement.next=store;     
			if(addelement.next != null)
			{
				addelement.next.prev=addelement;
			}
		}
		size++;
	}
	
	
	@Override
	public void add(Object element) 
	{
		Node addelement =new Node(element);
		if(head==null)
		{
			addelement.prev=null;
			head=addelement;
			tail=addelement;
		}
		else
		{
			tail.next=addelement;
			addelement.prev=tail;
			tail=addelement;
		}
		size++;
	}
	

	@Override
	public Object get(int index) 
	{
		Node current=head;
		Object value=null;
		if(index>=size || index<0)
		{
			throw new IndexOutOfBoundsException();
		}	
		else
		{
			for(int i=0;i<index;i++)
			{
				current=current.next;
			}	
			value=current.data;
		}	
		return value;
	}

	
	@Override
	public void set(int index, Object element) 
	{
		Node current=head;
		if(index==size-1)
		{
			tail.data=element;
		}
		else if(index==0)
		{
			head.data=element;	
		}
		else if(index>=size || index<0 || head==null)
		{
			throw new IndexOutOfBoundsException();
		}
		else
		{
			for(int i=0;i<index-1;i++)
			{	
				current=current.next;
			}
			current.next.data=element;
		}
	}

	
	@Override
	public void clear() 
	{
		Node current=head;
		if(head==null) 
		{ 
			size=0;
			return; 
        }
		while(current!=null)
		{
			head=current.next;
			current=current.next;
		}
		size=0;
		return;
	}

	
	@Override
	public boolean isEmpty() 
	{
		return size==0;
	}

	
	@Override
	public void remove(int index) 
	{
		Node current=head;
		if(head==null || index<0 || index>=size) 
		{ 
			throw new IndexOutOfBoundsException();
        }
		else if(index==0)
		{
			head=current.next;
		}	
		else
		{
			for(int i=0;i<index-1;i++)
			{	
				current=current.next;
			}
			current.next=current.next.next;
			if(index==size-1)
			{
				tail=current;
			}	
		}
		size--;
	}

	
	@Override
	public int size() 
	{
		return size;
	}

	
	@Override
	public ILinkedList sublist(int fromIndex, int toIndex) 
	{
		if(head==null || fromIndex<0 || fromIndex>=size || toIndex>=size || toIndex<0) 
			throw new IndexOutOfBoundsException();
		Node assist=head;
		int count=0;
		ILinkedList home=new Double();
		while(assist!=null)
		{
			if(count>=fromIndex && count<=toIndex)
				home.add(assist.data);
			assist=assist.next;
			count++;
			
		}	
		return home;
	}

	
	@Override
	public boolean contains(Object o) 
	{
		Node check=head;
		while (check!=null)
		{
			if(check.data==o)
			{
				return true;
			}	
			check=check.next;
		}	
		return false;
	}
	
	public int IndexOf(Object o)
	{
		if(head.data==null && head.next==null)
		{
			return -1;
		}
		int index=0;
		Node current=head;
		while(current.next!=null && current.data!=o)
		{
			index++;
			current=current.next;
		}	
		return index;	
	}

}
